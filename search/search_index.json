{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#terrabutler","title":"Terrabutler","text":"<p>The utility that helps keeping your IaC in one piece</p> <p> </p>"},{"location":"#what-is-terrabutler","title":"What is Terrabutler?","text":"<p>Terrabutler is a wrapper written in Python that helps maintaining IaC (Infrastructure as code) projects using Terraform by managing the environments.</p>"},{"location":"create-project/","title":"Create a new project","text":"<p>Before proceeding make sure that you have followed the Installation. </p>"},{"location":"create-project/#configure-direnv","title":"Configure direnv","text":"<p>For direnv to work properly it needs to be hooked into the shell. Check direnv docs to know more: https://direnv.net/docs/hook.html</p> <p>Make sure that you have followed direnv documentation before proceeding. </p>"},{"location":"create-project/#configure-terrabutler","title":"Configure Terrabutler","text":""},{"location":"create-project/#create-your-project-folder","title":"Create your project folder","text":"<pre><code>mkdir &lt;project_name&gt;\n</code></pre>"},{"location":"create-project/#download-template","title":"Download Template","text":"<p>Start by downloading the Terrabutler Template Project from the repository source below: </p> <p></p> <p>Copy the files inside <code>./terrabutler-template/</code> to the root of your project folder.</p> <pre><code>$ cp -a /terrabutler-template/. /&lt;project_name&gt;/\n</code></pre>"},{"location":"create-project/#create-a-new-workspace","title":"Create a new workspace","text":"<p>Before configuring terrabutler, inside <code>&lt;project_name&gt;/site_inception</code> folder, you will need to create a Terraform Workspace:  For example, we are gonna call it \"staging\"</p> <pre><code>$ cd site_inception\n$ terraform workspace new staging\n</code></pre>"},{"location":"create-project/#change-variables","title":"Change Variables","text":"<p>Run the script <code>./&lt;project_name&gt;/config_template.sh</code>, with the following arguments, located inside the project folder root:</p> <pre><code>$ ./config_template.sh -d &lt;domain&gt; -e &lt;environment_name&gt; -p &lt;project_name&gt;\n\nUSAGE:\n   ./config_template [FLAG] [STRING]\nFLAGS:\n   -o &lt;organization_name&gt;   The name for your organization.  Example: -o example\n\n-d &lt;domain&gt;              The domain of your organization. Example: -d example.com\n\n-e &lt;environment_name&gt;    The environment name of your organization. Example: -e staging\n</code></pre> Danger <p>This script only works with the template folder! Don't use it in another project folders! <code>./terrabutler-template/config_template.sh</code></p>"},{"location":"create-project/#terraform","title":"Terraform","text":"<p>Start by installing Terraform with tfenv:</p> <pre><code>$ tfenv install </code></pre>"},{"location":"create-project/#initialize-the-project","title":"Initialize the Project","text":"<p>Perform an Terraform Initialization inside site_inception:</p> <p><pre><code>$ cd /site_inception/\n$ terraform init\n</code></pre> Perform an Terraform Apply with the <code>.tfvars</code> inside <code>/config/variables/</code>:</p> <p><code>./configs/variables/global.tfvars</code> <code>./configs/variables/&lt;project_name&gt;-&lt;environment_name&gt;.tfvars\"</code> <code>./configs/variables/&lt;project_name&gt;-&lt;environment_name&gt;-inception.tfvars\"</code></p> <pre><code>$ terraform apply -var-file=\"../configs/variables/global.tfvars\" -var-file=\"../configs/variables/&lt;project_name&gt;-&lt;environment_name&gt;.tfvars\" -var-file=\"../configs/variables/&lt;project_name&gt;-&lt;environment_name&gt;-inception.tfvars\"\n</code></pre>"},{"location":"create-project/#change-local-to-remote-backend","title":"Change local to remote backend","text":""},{"location":"create-project/#uncomment-the-remote-backend-line","title":"Uncomment the remote backend line","text":"<p>Remove the commented line as below, in the <code>terrabutler-template</code> in the path <code>./site-inception/terraform.tf</code> to change from local to remote.</p> <pre><code>backend \"s3\" {}\n</code></pre> <p>Perform an Terraform initialization with the backend config file,located in <code>/configs/backend/</code> to update the new changes:</p> <pre><code>$ terraform init -backend-config=&lt;inception_backend_path&gt;  </code></pre> Tip <p>Example:    $ terraform init -backend-config=\"./configs/backends/--inception.tfvars\""},{"location":"create-project/#delete-the-local-state","title":"Delete the local state","text":"<p>Delete the local state in <code>/site_inception</code>, as it is not necessary:</p> <pre><code>$ rm -rf terraform.tfstate.d/ terraform.tfstate terraform.tfstate.backup\n</code></pre>"},{"location":"create-project/#terrabutler-commands","title":"Terrabutler commands","text":""},{"location":"create-project/#terrabutler-plan","title":"Terrabutler Plan","text":"<p>Perform an Terrabutler Plan to ensure everything is ok, and plan any changes:</p> <pre><code>$ terrabutler tf -site inception plan\n</code></pre>"},{"location":"create-project/#terrabutler-apply","title":"Terrabutler Apply","text":"<p>Perform an Terrabutler Apply to apply the planned changes:</p> <pre><code>$ terrabutler tf -site inception apply\n</code></pre>"},{"location":"create-project/#terrabutler-destroy","title":"Terrabutler Destroy","text":"<p>Perform an Terrabutler Destroy to delete or undo any changes made in the provider:</p> <pre><code>$ terrabutler tf -site inception destroy\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>Before proceeding make sure that you have the requirements.</p>"},{"location":"installation/#download-the-binaries-and-extract-them","title":"Download the binaries and extract them","text":"<p>All the binaries versions are available inside the releases pages</p> <p>To download the latest binaries run the following command:</p> <pre><code>wget -qO- https://github.com/montblu/terrabutler/releases/download/&lt;VERSION&gt;/terrabutler-&lt;OS&gt;-&lt;ARCH&gt;-&lt;VERSION&gt;.tar.gz | tar -zxvf - terrabutler\n</code></pre> <p>Where <code>&lt;VERSION&gt;</code> is the version of the release.</p> <p>For example, to download Terrabutler v1.0.0 for Linux x64, just run:</p> <pre><code>wget -qO- https://github.com/montblu/terrabutler/releases/download/v1.0.0/terrabutler-linux-x64-v1.0.0.tar.gz | tar -zxvf - terrabutler\n</code></pre> <p>To download Terrabutler v1.0.0 for MacOS arm64, just run:</p> <pre><code>wget -qO- https://github.com/montblu/terrabutler/releases/download/v1.0.0/terrabutler-macos-arm64-v1.0.0.tar.gz | tar -zxvf - terrabutler\n</code></pre> Warning <p>In case you have installed downloaded the archive via Safari you won't be able to use Terrabutler as the file will be marked as \"quarantined\" and you won't be able to use it as stated in this issue. </p>"},{"location":"installation/#install-the-binaries","title":"Install the binaries","text":"<p>To install the binaries into your system simply run the installer script inside the <code>terrabutler</code> folder:</p> <pre><code>sudo terrabutler/install\n</code></pre> <p>All the binaries will be placed inside the <code>/usr/local/share/terrabutler</code> folder and the bin inside the <code>/usr/local/bin</code> folder</p> Tip <p>If you wanna set the location where terrabutler will be installed you can define it by passing arguments when running the install script. This arguments can be seen by running:</p> <pre><code>terrabutler/install -h\n</code></pre> <p>Example of installing for local user only (no need to run the install script as sudo):</p> <pre><code>terrabutler/install -i ~/.local/share/terrabutler -b ~/.local/bin\n</code></pre>"},{"location":"installation/#check-if-the-installation-was-successful","title":"Check if the installation was successful","text":"<p>You should be able to run:</p> <pre><code>terrabutler --version\n</code></pre> <p>and the output should be:</p> <pre><code>Terrabutler: v1.0.0\n</code></pre> <p>If the output is not similar to the one above, then something went wrong during the installation.</p>"},{"location":"installation/#how-to-update-to-a-newer-version","title":"How to update to a newer version?","text":"<p>If you have Terrabutler already installed and want to update to a newer version just do all the installation process again. When you will be running the installer script it should prompt if you want to upgrade the Terrabutler, as we can see below:</p> <pre><code>Found preexisting Terrabutler installation: /usr/share/terrabutler.\nDo you want to replace it? [y/N]\n</code></pre> <p>Just press <code>y</code> and press enter and Terrabutler should be updated to the version that you downloaded.</p> Danger <p>In case you have installed the Terrabutler earlier with different locations, you will need to pass them, otherwise the install script won't prompt you to update it.</p>"},{"location":"new-site/","title":"Add a new site","text":""},{"location":"new-site/#create-a-new-directory","title":"Create a new directory","text":"<p>In the project folder root, create a new diretory called <code>site_&lt;site-name&gt;</code>:</p> <pre><code>$ mkdir site_&lt;site-name&gt;\n</code></pre> Tip <p>Replace <code>&lt;site-name&gt;</code>  with your new site name!</p>"},{"location":"new-site/#configure-the-new-site","title":"Configure the new site","text":""},{"location":"new-site/#add-the-new-site-to-site_inception-variables-file","title":"Add the new site to <code>site_inception</code> variables file","text":"<p>Add <code>&lt;site-name&gt;</code> to the following file, in <code>inception_projects = []</code> line:</p> <pre><code>./configs/variables/&lt;project&gt;-&lt;env&gt;-inception.tfvars\n</code></pre>"},{"location":"new-site/#add-the-new-site-to-terrabutler-settings","title":"Add the new site to Terrabutler settings","text":"<p>Add <code>&lt;site-name&gt;</code> to the following file, in <code>sites: ordered: - &lt;site-name&gt;</code> line:</p> <pre><code>./configs/settings.yml\n</code></pre>"},{"location":"new-site/#add-a-new-variable-file-to-the-variables-folder","title":"Add a new variable file to the Variables Folder","text":"<p>Create a new file called <code>&lt;project-name&gt;-&lt;env&gt;-&lt;site-name&gt;.tfvars</code> to the following directory:</p> <pre><code>./configs/variables/&lt;project-name&gt;-&lt;env&gt;-&lt;site-name&gt;.tfvars\n</code></pre>"},{"location":"new-site/#perform-an-apply-in-site_inception","title":"Perform an apply in <code>site_inception</code>","text":"<p>Run the following command, to update the new configuration on <code>site_inception</code>:</p> <pre><code>$ terrabutler tf -site inception apply\n</code></pre>"},{"location":"new-site/#add-files-to-the-new-site","title":"Add files to the new site","text":""},{"location":"new-site/#add-terraform-files","title":"Add terraform files","text":"<p>Run the following commands to copy the following Terraform files to the site_<code>&lt;site-name&gt;</code>:</p> <pre><code>$ cd site_&lt;site-name&gt;\n</code></pre> <pre><code>$ cp ../site_inception/terraform.tf .\n</code></pre> <pre><code>$ cp ../site_inception/provider.tf .\n</code></pre>"},{"location":"new-site/#create-symbolic-links","title":"Create Symbolic Links","text":"<p>Run the following commands to create the Symbolic Links:</p> <pre><code>$ cd site_&lt;site-name&gt;\n</code></pre> <p><pre><code>$ ln -s ../globals/data.tf ./data_global.tf\n</code></pre> <pre><code>$ ln -s ../globals/locals.tf ./locals_globals.tf\n</code></pre> <pre><code>$ ln -s ../globals/variables.tf ./variables_globals.tf\n</code></pre></p>"},{"location":"new-site/#perform-an-init-in-the-new-site","title":"Perform an init in the new site","text":"<p>Run the following command:</p> <pre><code>$ terrabutler tf -site data init </code></pre>"},{"location":"philosophy/","title":"Philosophy","text":"<p>Before settling for Terrabutler, it's a good idea to understand the philosophy behind the project, in order to make sure it aligns with your goals. This page explains the problem and the solution.</p>"},{"location":"philosophy/#problem","title":"Problem","text":"<p>All our IaC projects are backed by Terraform. Instead of having a folder with every resource, we have created different folders that have resources from the same category, and we call them <code>sites</code>. For example inside the <code>network site</code> we will have the creation of <code>VPC</code>, <code>SG</code> and <code>WAF</code>, so this site is where we have all the resources related to network. By splitting the code into various <code>sites</code> we have smaller plans and it's more easy to manage the code. By having all the code divided into various <code>sites</code> it's a bit more difficult to manage all the terraform variable files. And we wanted all of this for each environment, so it needs to be divided into different environments, for example production and development. All of the <code>sites</code> state needs to be have a remote state and with a lock function, to prevent usage at the same time.</p>"},{"location":"philosophy/#solution","title":"Solution","text":"<p>Create a IaC with the <code>inception site</code> that will be responsible to manage the project environments via Terraform workspaces tool and where the backends for each site will be created. Use Terrabutler to manage all the IAC between all the sites.</p>"},{"location":"requirements/","title":"Requirements","text":"<p>Before you start using you will need to have some tools installed.</p> <ul> <li>direnv</li> <li>tfenv</li> </ul> <p>These tools are required to be installed for a Terrabutler to work properly.</p> Danger <p>This repository only works on Intel based Processors (x86/x64). Arm/Arm64 or another processor architectures are incompatible!</p>"},{"location":"requirements/#installing-requirements","title":"Installing requirements","text":"<p>In the list below you have the install instruction for each tool:</p> <ul> <li>direnv</li> <li>tfenv</li> </ul>"},{"location":"requirements/#after-checking-requirements","title":"After checking requirements","text":"<p>You can now proceed to the installation process of Terrabutler.</p>"},{"location":"usage/","title":"Basic Usage","text":"<p>In this section we quickly cover the basic commands of Terrabutler. The usage of it can always be seen by using the help menu inside of every command or subcommand.</p> <p>Example:</p> <pre><code>terrabutler tf -site inception apply --help\n</code></pre> <p>The command above shows all the arguments and options that can be used when running that command.</p>"},{"location":"usage/#usage","title":"Usage","text":"<pre><code>terrabutler [global options] command [subcommand] [arguments] [options]\n</code></pre>"},{"location":"usage/#global-options","title":"Global options","text":"<p>All global options can be placed at the command level.</p> <ul> <li><code>--help</code>, <code>-help</code>, <code>-h</code>: Show help menu.</li> <li><code>--version</code>, <code>-version</code>: Show version of Terrabutler.</li> </ul>"},{"location":"usage/#commands","title":"Commands","text":"<p>The commands are:</p> <ul> <li><code>env</code>: Manage environments</li> <li><code>init</code>: Initialize the manager</li> <li><code>tf</code>: Manage terraform commands</li> </ul>"},{"location":"usage/#command-env","title":"Command <code>env</code>","text":"<p>Subcommands:</p> <ul> <li><code>delete</code>: \"Delete an environment\"</li> <li><code>list</code>: \"List environments\"</li> <li><code>new</code>: \"Create a new environment\"</li> <li><code>reload</code>: \"Reload the current environment\"</li> <li><code>select</code>: \"Select a environment\"</li> <li><code>show</code>: \"Show the name of the current environment\"</li> </ul> <p>Example:</p> <pre><code>terrabutler env select staging\n</code></pre> <p>The command above change the current environment to <code>staging</code>.</p>"},{"location":"usage/#command-tf","title":"Command <code>tf</code>","text":"Tip <p>The <code>tf</code> subcommands are the Terraform commands</p> <p>Subcommands:</p> <ul> <li><code>apply</code>: \"Create or update infrastructure\"</li> <li><code>console</code>: \"Try Terraform expressions at an interactive command...\"</li> <li><code>destroy</code>: \"Prepare your working directory for other commands\"</li> <li><code>fmt</code>: \"Reformat your configuration in the standardstyle\"</li> <li><code>force-unlock</code>: \"Release a stuck lock on the current workspace\"</li> <li><code>generate-options</code>: \"Generate terraform options\"</li> <li><code>import</code>: \"Associate existing infrastructure with a Terraform...\"</li> <li><code>init</code>: \"Prepare your working directory for other commands\"</li> <li><code>output</code>: \"Show output values from your root module\"</li> <li><code>plan</code>: \"Show changes required by the current configuration\"</li> <li><code>providers</code>: \"Show the providers required for this configuration\"</li> <li><code>refresh</code>: \"Update the state to match remote systems\"</li> <li><code>show</code>: \"Show the current state or a saved plan\"</li> <li><code>state</code>: \"Advanced state management\"</li> <li><code>taint</code>: \"Mark a resource instance as not fully functional\"</li> <li><code>untaint</code>: \"Remove the 'tainted' state from a resource instance\"</li> <li><code>validate</code>: \"Validate the configuration files\"</li> <li><code>version</code>: \"Show the current Terraform version\"</li> </ul> <p>Example:</p> <pre><code>terrabutler tf -site inception apply\n</code></pre> <p>The command above run a <code>terraform apply</code> command inside the <code>site inception</code> in the current environment.</p>"},{"location":"usage/#command-init","title":"Command <code>init</code>","text":"<p>Has no subcommands</p>"}]}